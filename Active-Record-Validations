===============================================================================================================================================
                                                               Active Record Validations
===============================================================================================================================================

1) Validations Overview:-
==========================
 Here's an example of a very simple validation:
 
 -----------------------------------
 class Person < ApplicationRecord
   validates :name, presence: true
 end
 -----------------------------------

 -----------------------------------------------
 irb> Person.create(name: "John Doe").valid?
 => true
 irb> Person.create(name: nil).valid?
 => false
 -----------------------------------------------

===============================================================================================================================================

2) When Does Validation Happen?:-
=================================

 ---------------------------------
 class Person < ApplicationRecord
 end
 ---------------------------------

 -------------------------------------------------------------------------
 irb> p = Person.new(name: "John Doe")
 => #<Person id: nil, name: "John Doe", created_at: nil, updated_at: nil>

 irb> p.new_record?
 => true

 irb> p.save
 => true

 irb> p.new_record?
 => false
 -------------------------------------------------------------------------

===============================================================================================================================================

 The following methods trigger validations, and will save the object to the database only if the object is valid:

 create
 ------
 create!
--------
 save
 ----
 save!
 -----
 update
 ------
 update!
--------

 The bang versions (e.g. save!) raise an exception if the record is invalid. The non-bang versions
     ------------               ------------------                           ----------------------
 don't: save and update return false, and create returns the object.
        ----------------------------      --------------------------

===============================================================================================================================================


3) Skipping Validations:-
=========================

 The following methods skip validations, and will save the object to the database regardless of its validity. They should be used with caution.


 decrement!
-----------
 decrement_counter
------------------
 increment!
-----------
 increment_counter
------------------
 insert
--------
 insert!
 -------
 insert_all
------------
 insert_all!
------------
 toggle!
--------
 touch
------
 touch_all
----------
 update_all
 ----------
 update_attribute
------------------
 update_column
--------------
 update_columns
----------------
 update_counters
----------------
 upsert
-------
 upsert_all
------------

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Note that save also has the ability to skip validations if passed validate:
 false as an argument. This technique should be used with caution.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 save(validate: false)
 ---------------------

===============================================================================================================================================

4) valid? and invalid?:-
========================
 Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.


 You can also run these validations on your own. valid? triggers your validations and returns true if
 no errors were found in the object, and false otherwise.

-------------------------------------------------
 class Person < ApplicationRecord
   validates :name, presence: true
 end
------------------------------------------------

 irb> Person.create(name: "John Doe").valid?
 => true
 irb> Person.create(name: nil).valid?
 => false
-----------------------------------------------

---------------------------------------------------------------------
 irb> p = Person.new
 => #<Person id: nil, name: nil>
 irb> p.errors.size
 => 0

 irb> p.valid?
 => false
 irb> p.errors.objects.first.full_message
 => "Name can't be blank"

 irb> p = Person.create
 => #<Person id: nil, name: nil>
 irb> p.errors.objects.first.full_message
 => "Name can't be blank"

 irb> p.save
 => false

 irb> p.save!
 ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

 irb> Person.create!
 ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
----------------------------------------------------------------------

invalid? is the inverse of valid?. It triggers your validations, returning true if any errors were found in the object, and false otherwise.


===============================================================================================================================================

5) errors[]:-
=============

 To verify whether or not a particular attribute of an object is valid, you can use
 errors[:attribute]. It returns an array of all the error messages for :attribute. If there are
 no errors on the specified attribute, an empty array is returned.

 This method is only useful after validations have been run, because it only inspects the errors
 collection and does not trigger validations itself. It's different from the
 ActiveRecord::Base#invalid? method explained above because it doesn't verify the validity of
 the object as a whole. It only checks to see whether there are errors found on an individual attribute of the object.

-----------------------------------------
 class Person < ApplicationRecord
   validates :name, presence: true
 end
-----------------------------------------

irb> Person.new.errors[:name].any?
=> false
irb> Person.create.errors[:name].any?
=> true

-----------------------------------------

===============================================================================================================================================

6) Validation Helpers:-
=======================

 Active Record offers many pre-defined validation helpers that you can use directly inside your class
 definitions. These helpers provide common validation rules. Every time a validation fails, an error is
 added to the object's errors collection, and this is associated with the attribute being validated.

 Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add
 the same kind of validation to several attributes.

 All of them accept the :on and :message options, which define when the validation should be run
 and what message should be added to the errors collection if it fails, respectively. The :on option
 takes one of the values :create or :update. There is a default error message for each one of the
 validation helpers. These messages are used when the :message option isn't specified. Let's take a
 look at each one of the available helpers.

 1) acceptance:-
================

-------------------------------------------------
 class Person < ApplicationRecord
  validates :terms_of_service, acceptance: true
 end
-------------------------------------------------
---------------------------------------------------------------------------
 class Person < ApplicationRecord
   validates :terms_of_service, acceptance: { message: 'must be abided' }
 end
---------------------------------------------------------------------------

---------------------------------------------------------------------------
 class Person < ApplicationRecord
   validates :terms_of_service, acceptance: { accept: 'yes' }
   validates :eula, acceptance: { accept: ['TRUE', 'accepted'] }
 end
---------------------------------------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 2) validates_associated:-
==========================

 You should use this helper when your model has associations with other models and they also need
 to be validated. When you try to save your object, valid? will be called upon each one of the associated objects.

-------------------------------------
 class Library < ApplicationRecord
   has_many :books
   validates_associated :books
 end
------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

 3) confirmation
 ~~~~~~~~~~~~~~~
 4) exclusion
 ~~~~~~~~~~~
 5) format
 ~~~~~~~~~
 6) inclusion
 ~~~~~~~~~~~~
 7) length
 ~~~~~~~~~
 8) numericality
 ~~~~~~~~~~~~~~~~
 9) presence
 ~~~~~~~~~~~~
 10) absence
 ~~~~~~~~~~~~
 11) uniqueness
 ~~~~~~~~~~~~~~
 12) validates_with
 ~~~~~~~~~~~~~~~~~~
 13) validates_each
 ~~~~~~~~~~~~~~~~~~
 
===============================================================================================================================================

 














