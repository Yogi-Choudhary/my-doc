===============================================================================================================================================
                                                                Active Record Callbacks
===============================================================================================================================================

1) The Object Life Cycle:-
==========================

  During the normal operation of a Rails application, objects may be created, updated, and destroyed.
  Active Record provides hooks into this object life cycle so that you can control your application and its data.

  Callbacks allow you to trigger logic before or after an alteration of an object's state.

===============================================================================================================================================

2) Callbacks Overview:-
=======================

  Callbacks are methods that get called at certain moments of an object's life cycle. With callbacks it is
  possible to write code that will run whenever an Active Record object is created, saved, updated,
                                                   ------------------------------------------------
  deleted, validated, or loaded from the database.
  ------------------------------------------------

===============================================================================================================================================

3) Available Callbacks:-
========================

  3.1 Creating an Object:-
  -----------------------

  * before_validation

  * after_validation

  * before_save

  * around_save

  * before_create
  
  * around_create

  * after_create

  * after_save

  * after_commit / after_rollback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  3.2 Updating an Object:-
  ----------------------

  * before_validation

  * after_validation

  * before_save

  * around_save

  * before_update

  * around_update

  * after_update

  * after_save

  * after_commit / after_rollback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  3.3 Destroying an Object:-
  ------------------------

  * before_destroy
  
  * around_destroy

  * after_destroy

  * after_commit / after_rollback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  3.4 after_initialize and after_find:-
  -------------------------------------

  The after_initialize callback will be called whenever an Active Record object is instantiated,
  either by directly using new or when a record is loaded from the database. It can be useful to avoid
  the need to directly override your Active Record initialize method.

  The after_find callback will be called whenever Active Record loads a record from the database.
  after_find is called before after_initialize if both are defined.
 
  The after_initialize and after_find callbacks have no before_* counterparts, but they
  can be registered just like the other Active Record callbacks.

------------------------------------------------
  class User < ApplicationRecord
    after_initialize do |user|
      puts "You have initialized an object!"
    end

    after_find do |user|
      puts "You have found an object!"
    end
  end
--------------------------------------------------

  irb> User.new
  You have initialized an object!
  => #<User id: nil>

  irb> User.first
  You have found an object!
  You have initialized an object!
  => #<User id: 1> 
----------------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  3.5 after_touch:-
  -----------------

  The after_touch callback will be called whenever an Active Record object is touched.

------------------------------------------
  class User < ApplicationRecord
    after_touch do |user|
      puts "You have touched an object"
    end
  end

  class User < ApplicationRecord
    after_touch do |user|
      puts "You have touched an object"
    end
  end
------------------------------------------
 
 irb> u = User.create(name: 'Kuldeep')
 => #<User id: 1, name: "Kuldeep", created_at: "2013-11-25 12:17:49", updated_at: "2013-11-25 12:17:49">

 irb> u.touch
 You have touched an object
 => true 
-----------------------------------------

 It can be used along with belongs_to:

 class Employee < ApplicationRecord
   belongs_to :company, touch: true

   after_touch do
     puts 'An Employee was touched'
   end
 end

 class Company < ApplicationRecord
  
  has_many :employees
  after_touch :log_when_employees_or_company_touched

  private
    def log_when_employees_or_company_touched
      puts 'Employee/Company was touched'
    end
 end
------------------------------------------

 irb> @employee = Employee.last
 => #<Employee id: 1, company_id: 1, created_at: "2013-11-25 17:04:22", updated_at: "2013-11-25 17:05:05">

 irb> @employee.touch # triggers @employee.company.touch
 An Employee was touched
 Employee/Company was touched
 => true
------------------------------------------

===============================================================================================================================================

4 Running Callbacks:-
=====================
 
 The following methods trigger callbacks:

 * create
 * create!
 * destroy
 * destroy!
 * destroy_all
 * destroy_by
 * save
 * save!
 * save(validate: false)
 * toggle!
 * touch
 * update_attribute
 * update
 * update!
 * valid?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 
 Additionally, the after_find callback is triggered by the following finder methods:

 * all
 * first
 * find
 * find_by
 * find_by_*
 * find_by_*!
 * find_by_sql
 * last

 The after_initialize callback is triggered every time a new object of the class is initialized.

===============================================================================================================================================

5) Skipping Callbacks:-
=======================

 Just as with validations, it is also possible to skip callbacks by using the following methods:

 * decrement!
 * decrement_counter
 * delete
 * delete_all 
 * delete_by
 * increment!
 * increment_counter
 * insert
 * insert!
 * insert_all
 * insert_all!
 * touch_all
 * update_column
 * update_columns
 * update_all
 * update_counters
 * upsert
 * upsert_all

 These methods should be used with caution, however, because important business rules and
 application logic may be kept in callbacks. Bypassing them without understanding the potential
 implications may lead to invalid data.

===============================================================================================================================================

6) Halting Execution:- 
======================

 The idea with callbacks is that you just don't do anything after you've made the call, and then execute the
 callback function when the call is complete. To halt execution you simply don't have any code after the call.

 The whole callback chain is wrapped in a transaction. If any callback raises an exception, the
 execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:

 throw :abort
 ------------

===============================================================================================================================================

7) Relational Callbacks:- 
=========================

 Callbacks work through model relationships, and can even be defined by them. Suppose an example
 where a user has many articles. A user's articles should be destroyed if the user is destroyed. Let's
 add an after_destroy callback to the User model by way of its relationship to the Article
 model:

-------------------------------------------
 class User < ApplicationRecord
   has_many :articles, dependent: :destroy
 end

 class Article < ApplicationRecord
   after_destroy :log_destroy_action

   def log_destroy_action
     puts 'Article destroyed'
   end
 end
-------------------------------------------

 irb> user = User.first
 => #<User id: 1>
 irb> user.articles.create!
 => #<Article id: 1, user_id: 1>
 irb> user.destroy
 Article destroyed
 => #<User id: 1>
-------------------------------------------

===============================================================================================================================================

8) Conditional Callbacks:-
==========================

 As with validations, we can also make the calling of a callback method conditional on the satisfaction
 of a given predicate. We can do this using the :if and :unless options, which can take a symbol,
 a Proc or an Array. You may use the :if option when you want to specify under which
 conditions the callback should be called. If you want to specify the conditions under which the
 callback should not be called, then you may use the :unless option.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 8.1 Using :if and :unless with a Symbol
 ---------------------------------------

 You can associate the :if and :unless options with a symbol corresponding to the name of a
 predicate method that will get called right before the callback. When using the :if option, the
 callback won't be executed if the predicate method returns false; when using the :unless option,
 the callback won't be executed if the predicate method returns true. This is the most common option.
 Using this form of registration it is also possible to register several different predicates that should be
 called to check if the callback should be executed.

------------------------------------------------------------
 class Order < ApplicationRecord
   before_save :normalize_card_number, if: :paid_with_card?
 end
------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 8.2 Using :if and :unless with a Proc
 -------------------------------------

 It is possible to associate :if and :unless with a Proc object. This option is best suited when
 writing short validation methods, usually one-liners:

---------------------------------------------------- 
 class Order < ApplicationRecord
  before_save :normalize_card_number,
    if: Proc.new { |order| order.paid_with_card? }
 end
----------------------------------------------------

 As the proc is evaluated in the context of the object, it is also possible to write this as:

------------------------------------------------------------------------
 class Order < ApplicationRecord
   before_save :normalize_card_number, if: Proc.new { paid_with_card? }
 end
------------------------------------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 8.3 Multiple Conditions for Callbacks
 -------------------------------------

 When writing conditional callbacks, it is possible to mix both :if and :unless in the same callback declaration:

--------------------------------------------------------------------
 class Comment < ApplicationRecord
  after_create :send_email_to_author, if: :author_wants_emails?,
    unless: Proc.new { |comment| comment.article.ignore_comments? }
 end
--------------------------------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 8.4 Combining Callback Conditions
 ---------------------------------

 When multiple conditions define whether or not a callback should happen, an Array can be used.
 Moreover, you can apply both :if and :unless to the same callback.

---------------------------------------------------------------------------
 class Comment < ApplicationRecord
  after_create :send_email_to_author,
    if: [Proc.new { |c| c.user.allow_send_email? }, :author_wants_emails?],
    unless: Proc.new { |c| c.article.ignore_comments? }
 end
----------------------------------------------------------------------------

The callback only runs when all the :if conditions and none of the :unless conditions are evaluated to true.

===============================================================================================================================================

9) Callback Classes:-
=====================

 Sometimes the callback methods that you'll write will be useful enough to be reused by other models.
 Active Record makes it possible to create classes that encapsulate the callback methods, so they can be reused.

 Here's an example where we create a class with an after_destroy callback for a PictureFile model:

-------------------------------------------
 class PictureFileCallbacks
   def after_destroy(picture_file)
     if File.exist?(picture_file.filepath)
       File.delete(picture_file.filepath)
     end
   end
 end
--------------------------------------------

 When declared inside a class, as above, the callback methods will receive the model object as a
 parameter. We can now use the callback class in the model:

-----------------------------------------
 class PictureFile < ApplicationRecord
   after_destroy PictureFileCallbacks.new
 end
-----------------------------------------

===============================================================================================================================================

10) Transaction Callbacks:-
===========================
 
 ......................

===============================================================================================================================================







