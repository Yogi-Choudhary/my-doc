===============================================================================================================================================
                                                               Associations
===============================================================================================================================================

1) Has Many Through Associations.

The has_many :through Association.

A has_many :through association is often used to set up a many-to-many connection with another model. This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model. For example, consider a medical practice where patients make appointments to see physicians. The relevant association declarations could look like this:

class Student < ApplicationRecord
  has_many :subjects
  has_many :teachers, through: :subjects
end

class Subject < ApplicationRecord
  belongs_to :student
  belongs_to :teacher
end


class Teacher < ApplicationRecord
  has_many :subjects
  has_many :students, through: :subjects
end


===============================================================================================================================================

The corresponding migration might look like this:

===============================================================================================================================================

ActiveRecord::Schema.define(version: 2021_04_06_065232) do

  create_table "students", force: :cascade do |t|
    t.string "name"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end

  create_table "subjects", force: :cascade do |t|
    t.string "name"
    t.date "time"
    t.integer "student_id", null: false
    t.integer "teacher_id", null: false
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
    t.index ["student_id"], name: "index_subjects_on_student_id"
    t.index ["teacher_id"], name: "index_subjects_on_teacher_id"
  end

  create_table "teachers", force: :cascade do |t|
    t.string "name"
    t.integer "age"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end

  add_foreign_key "subjects", "students"
  add_foreign_key "subjects", "teachers"
end

===============================================================================================================================================

rails c

===============================================================================================================================================

s1 = Student.create(name: "yogi")

s2 = Student.create(name: "deep")

t1 = Teacher.create(name: "ravi sir", students: [s1,s2])

t1.students.count

t1.students

t1.students.count

t2 = Teacher.create(name: "Einstein")

s3 = Student.create(name: "vivek", teachers: [t1,t2])

s3.teachers

s3.subjects

s3.subjects.first.teacher

===============================================================================================================================================

                                                         The has_one :through Association

===============================================================================================================================================

A has_one :through association sets up a one-to-one connection with another model. This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model. For example, if each supplier has one account, and each account is associated with one account history, then the supplier model could look like this:

class Supplier < ApplicationRecord
  has_one :account
  has_one :account_history, through: :account
end

class Account < ApplicationRecord
  belongs_to :supplier
  has_one :account_history
end

class AccountHistory < ApplicationRecord
  belongs_to :account
end

===============================================================================================================================================

The corresponding migration might look like this:

===============================================================================================================================================

class CreateAccountHistories < ActiveRecord::Migration[6.0]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier
      t.string :account_number
      t.timestamps
    end

    create_table :account_histories do |t|
      t.belongs_to :account
      t.integer :credit_rating
      t.timestamps
    end
  end
end

===============================================================================================================================================

                                                    The has_and_belongs_to_many Association

===============================================================================================================================================

A has_and_belongs_to_many association creates a direct many-to-many connection with another model, with no intervening model. This association indicates that each instance of the declaring model refers to zero or more instances of another model. For example, if your application includes assemblies and parts, with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:

class Assembly < ApplicationRecord
  has_and_belongs_to_many :parts
end

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end

===============================================================================================================================================

The corresponding migration might look like this:

===============================================================================================================================================

class CreateAssembliesAndParts < ActiveRecord::Migration[6.0]
  def change
    create_table :assemblies do |t|
      t.string :name
      t.timestamps
    end

    create_table :parts do |t|
      t.string :part_number
      t.timestamps
    end

    create_table :assemblies_parts, id: false do |t|
      t.belongs_to :assembly
      t.belongs_to :part
    end
  end
end

===============================================================================================================================================





























